#!/bin/env sh

### --HELP START-- ###

# Frontend to wpa_supplicant/wpa_cli using dmenu or fzf.

# Basic usage: When called without an argument, it prompts for a network
#   selection. If we are connected to the selected network it disconnects,
#   else it connects. If the selected network is new it asks for the
#   password and then adds it to wpa_supplicant.conf

# Options:
#   -E: Edit connection. Prompts for a network selection and then for an
#       action upon the selected network.
#       Actions:
#         + Change Password: Change the password
#         + View Password: Shows a notification with the current password
#           and adds the password to the clipboard
#         + Forget: Remove the network from wpa_supplicant.conf
#   -t: Call from terminal. Replaces all menus with fzf
#   -h: Display this help message.

# dakodeon, 2020

### --HELP END-- ###

# init flags
EDIT=false
CONN=true # default behaviour
TERM=false # this is used for some debugging if in a remote shell

while getopts ":Eth" opt; do
    case $opt in
	E) EDIT=true && CONN=false ;;
	t) TERM=true ;;
	h) sed '0,/HELP START/d;/HELP END/,$d;s/^# //' "$0" && exit ;;
	\?) echo "Unknown option. Use -h for help." >&2 && exit 23 ;;
    esac
done

shift $((OPTIND-1))

# functions

# general prompt. Expects 3 args: 1. list of options, 2. prompt, 3. num of candidates
prompt() { \
	   if $TERM; then printf "$1" | fzf --height=$3 --prompt="$2"
	   else printf "$1" | dmenu -c -l $3 -i -p "$2"; fi
}

# passwd prompt. Expects 3 args: 1. prompt, 2. network name, 3. optional new network indicator
setpasswd() { \
	      # assume that an empty password corresponds to an open network
	      if $TERM; then
		  echo "$1"
		  stty -echo
		  read pass
		  stty echo
	      else
		  pass="$(dmenu -P -c -l 1 -p "$1")" || exit 3
	      fi
	      netnum="$(test -n "$3" && wpa_cli add_network | sed -n '2p' || \
			      wpa_cli list_networks | grep "$2" | awk '{print $1}')"
	      test -n "$3" && wpa_cli set_network $netnum ssid "\"$2\""
	      test -n "$pass" && wpa_cli set_network $netnum psk "\"$pass\"" \
		      || wpa_cli set_network $netnum key_mgmt NONE 
}

did=987654

if $CONN; then
    wpa_cli scan && networks="$(wpa_cli scan_results | awk 'NR > 2 {print $5}')" || exit 23
    sel="$(prompt "$networks" "Select network: " 12)" || exit 3
    if wpa_cli list_networks | grep -q "$sel"; then
	netnum="$(wpa_cli list_networks | grep "$sel" | awk '{print $1}')"
    else
	setpasswd "Password for \"$sel\": " "$sel" 1
    fi
    
    # if the selected network is the current network disconnect, else connect
    test "$(wpa_cli list_networks | grep "$sel" | awk '{print $NF}')" = "[CURRENT]" && \
	{ wpa_cli disconnect;
	  dunstify -r $did " WiFi" "Disconnected from \"$sel\""; } || \
	    { wpa_cli select_network $netnum; wpa_cli save_config;
	      dunstify -r $did " WiFi" "Connected to \"$sel\""; }

elif $EDIT; then
    networks="$(wpa_cli list_networks | awk 'NR>2 && $2!="any" {print $2}')"
    sel="$(prompt "$networks" "Configure network: " 12)" || exit 3
    netnum="$(wpa_cli list_networks | grep "$sel" | awk '{print $1}')"
    action="$(prompt "Change Password\nShow Password\nForget" "action on \"$sel\": " 5)" || exit 3

    case "$action" in
	"Change Password")
	    setpasswd "New password for \"$sel\": " "$sel"
	    dunstify -r $did " WiFi" "\"$sel\" password updated"
	    ;;
	"Show Password")
	# h) sed '0,/HELP START/d;/HELP END/,$d;s/^# //' "$0" && exit ;;
	    pass="$(cat /etc/wpa_supplicant/wpa_supplicant.conf | sed -n "0,/$sel/d;/\}/,\$d;s/\s*psk=//p" | tr -d '"')"
	    dunstify -r $did " Password for \"$sel\":" "$pass"
	    echo -n "$pass" | xclip -selection clipboard
	    ;;
	"Forget")
	    yorn="$(prompt "Yes\nNo" "Really forget \"$sel\"? ")" || exit 3
	    test "$yorn" = "Yes" && wpa_cli remove_network $netnum || exit 3
	    dunstify -r $did " WiFi" "\"$sel\" removed from known networks"
	    ;;
    esac

    wpa_cli save_config
fi
