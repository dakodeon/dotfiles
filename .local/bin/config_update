#!/bin/bash

# a new approach --- mine!

# define paths
declare -A path=()

REPO=$HOME/dotfiles
# check if repo dir exists, else exit with error

path[config]=$HOME/.config
path[HOME]=$HOME
path[i3]=${path[config]}/i3
path[i3blocks]=${path[i3]}/i3blocks
path[ranger]=${path[config]}/ranger
path[scripts]=${path[config]}/scripts

while getopts ":ua:ldh" opt; do
    case $opt in
	u)
	    for dir in "${!path[@]}"; do
		# find command
		find $REPO/$dir -type f | while read -r file; do
		    target=${path[$dir]}/$(basename $file)
		    f_inode=$(ls -i $file | cut -d' ' -f1)
		    t_inode=$(ls -i $target | cut -d' ' -f1)
		    if [[ $f_inode -eq $t_inode ]] ; then
			echo === File $(basename $file) already linked
		    else
			if [ "$file" -nt "$target" ]; then
			    echo Linking file $(basename $file)...
			    ln -f $file $target
			else
			    echo File $(basename $file) is newer in destination. Do a diff or something.
			fi
		    fi
		done
	    done
	    ;;
	a)
	    if [ -f $OPTARG ] ; then
		dest_dir=$(echo $OPTARG | awk 'BEGIN {FS = "/"} ; {print $(NF-1)}')
		if [ -d $REPO/$dest_dir ] ; then
		    mv $OPTARG $REPO/$dest_dir && ln -f $REPO/$dest_dir/$(basename $OPTARG) $OPTARG && echo File linked || (echo Linking failed! && exit 1)
		fi
	    else
		echo Error: Not a valid filename
		exit 1
	    fi
	    ;;
	l)
	    for dir in "${!path[@]}"; do
		echo $dir '->' ${path[$dir]}:
		find $REPO/$dir -type f | while read -r file; do
		    echo -e "\t$(basename $file)"
		done
	    done
	    exit 0
	    ;;
	d)
	    for dir in "${!path[@]}"; do
		echo $dir '->' ${path[$dir]}
	    done
	    exit 0
	    ;;
	h)
	    printf "Update config files.\n\nOptions:\n\t-u: Check if all files in the repo are linked to their location.\n\t-a: Add file to the repo and link it back in place.\n\t-l: Print out a list of files in the repo.\n\t-d: Print out a list of directories in the repo.\n\t-h: Print out this help message.\n\n\t\tby DAKODEON, 2019\n"
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    exit 1
	    ;;
    esac
done
